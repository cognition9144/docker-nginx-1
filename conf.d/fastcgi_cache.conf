# Sets the path and other parameters of a cache.
fastcgi_cache_path /var/www/fcgicache levels=1:2 keys_zone=microcache:8m max_size=64m inactive=1h;

#  Defines a key for caching, for example
fastcgi_cache_key $request_method$scheme$host$request_uri;

# Determines in which cases a stale cached response can be used when an error occurs 
# during communication with the FastCGI server.
#
# The error parameter also permits using a stale cached response if a FastCGI server to
# process a request cannot be selected.
#
# Additionally, the updating parameter permits using a stale cached response if it is
# currently being updated. This allows minimizing the number of accesses to FastCGI
# servers when updating cached data. 
#
# invalid_header: a server returned an empty or invalid response.
fastcgi_cache_use_stale updating error timeout invalid_header http_500 http_503;

# Useful only when using [ngx_cache_purge](https://github.com/FRiCKLE/ngx_cache_purge/)
# location ~ /purge(/.*) {
# 	allow fastcgi;
# 	deny all;
# 
# 	fastcgi_cache_purge microcache "$request_method$scheme$host$1";
# }

# Enables revalidation of expired cache items using conditional requests with the 
# “If-Modified-Since” and “If-None-Match” header fields. 
# It's best to just honor the backend's cache control.
fastcgi_cache_revalidate on;

# Only one request at a time will be allowed to populate a new cache element identified 
# according to the fastcgi_cache_key directive by passing a request to a FastCGI server. 
# Other requests of the same cache element will either wait for a response to appear in
# the cache or the cache lock for this element to be released, up to the time set by the
# fastcgi_cache_lock_timeout directive. 
fastcgi_cache_lock on;